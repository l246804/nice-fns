import{_ as t,o as e,c as s,R as a}from"./chunks/framework.KXHDQ-dn.js";const y=JSON.parse('{"title":"parseJSON","description":"","frontmatter":{},"headers":[],"relativePath":"api/parseJSON.md","filePath":"api/parseJSON.md"}'),i={name:"api/parseJSON.md"},l=a(`<h1 id="parsejson" tabindex="-1">parseJSON <a class="header-anchor" href="#parsejson" aria-label="Permalink to &quot;parseJSON&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="parsejson-1" tabindex="-1">parseJSON() <a class="header-anchor" href="#parsejson-1" aria-label="Permalink to &quot;parseJSON()&quot;">​</a></h3><blockquote><p><strong>parseJSON</strong>&lt;<code>T</code>&gt;(<code>text</code>, <code>options</code>): <code>T</code></p></blockquote><p>解析 <code>JSON</code> 文本</p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>JSON</code> 文本</td></tr><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./parseJSON.html#parsejsonoptionst"><code>ParseJSONOptions</code></a>&lt;<code>T</code>&gt;</td><td style="text-align:left;">配置项</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>T</code></p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误或者值为空时设置 {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{ a: 1 }&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { onNil: {} }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简写默认值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{ a: 1 }&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onNil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({})  }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数返回默认值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误时设为 {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{ a: 1 }&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onNil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值为空时设为 {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;null&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onNil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; {}</span></span></code></pre></div><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><h3 id="parsejsonoptions-t" tabindex="-1">ParseJSONOptions&lt;T&gt; <a class="header-anchor" href="#parsejsonoptions-t" aria-label="Permalink to &quot;ParseJSONOptions\\&lt;T\\&gt;&quot;">​</a></h3><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><h4 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onNil?</code></td><td style="text-align:left;"><code>T</code> | (<code>error</code>, <code>value</code>, <code>text</code>) =&gt; <code>T</code></td><td style="text-align:left;">解析结果为 <code>null</code> 或 <code>undefined</code> 时执行并返回最终结果<br><br><strong>Param</strong><br>解析错误时的错误信息<br><br><strong>Param</strong><br>解析结果，固定为 <code>null</code> 或 <code>undefined</code><br><br><strong>Param</strong><br>解析的 <code>JSON</code> 文本<br><br><strong>Example</strong><br>\`</td></tr><tr><td style="text-align:left;">parseJSON(&#39;这是错误的 JSON 文本&#39;, {</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">onNil(error, value) {</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><pre><code> if (error) return &#39;error&#39;
 return value === null ? &#39;null&#39; : &#39;default&#39;
</code></pre><p>}, }) // =&gt; &#39;error&#39;</p><p>parseJSON(&#39;直接设置默认值&#39;, { onNil: &#39;default&#39; }) // =&gt; &#39;default&#39; <code>| |</code>reviver?<code> | (</code>this<code>, </code>key<code>, </code>value<code>) =&gt; </code>any\` | - |</p>`,22),n=[l];function r(h,d,p,o,k,c){return e(),s("div",null,n)}const E=t(i,[["render",r]]);export{y as __pageData,E as default};
