import{_ as t,o as a,c as e,R as s}from"./chunks/framework.KXHDQ-dn.js";const g=JSON.parse('{"title":"castFunction","description":"","frontmatter":{},"headers":[],"relativePath":"api/castFunction.md","filePath":"api/castFunction.md"}'),n={name:"api/castFunction.md"},i=s(`<h1 id="castfunction" tabindex="-1">castFunction <a class="header-anchor" href="#castfunction" aria-label="Permalink to &quot;castFunction&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="castfunction-1" tabindex="-1">castFunction() <a class="header-anchor" href="#castfunction-1" aria-label="Permalink to &quot;castFunction()&quot;">​</a></h3><blockquote><p><strong>castFunction</strong>&lt;<code>T</code>, <code>Args</code>&gt;(<code>value</code>): <code>ToFn</code>&lt;<code>T</code>, <code>Args</code>&gt;</p></blockquote><p>转换值为 <code>Function</code></p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>Args</code> extends <code>any</code>[]</td><td style="text-align:left;">[]</td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">检测值</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>ToFn</code>&lt;<code>T</code>, <code>Args</code>&gt;</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">castFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; () =&gt; 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">castFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; () =&gt; &#39;1&#39;</span></span></code></pre></div>`,13),l=[i];function o(c,r,d,h,p,u){return a(),e("div",null,l)}const y=t(n,[["render",o]]);export{g as __pageData,y as default};
