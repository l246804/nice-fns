import{_ as t,o as e,c as a,R as s}from"./chunks/framework.KXHDQ-dn.js";const m=JSON.parse('{"title":"compactObject","description":"","frontmatter":{},"headers":[],"relativePath":"api/compactObject.md","filePath":"api/compactObject.md"}'),i={name:"api/compactObject.md"},l=s(`<h1 id="compactobject" tabindex="-1">compactObject <a class="header-anchor" href="#compactobject" aria-label="Permalink to &quot;compactObject&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="compactobject-1" tabindex="-1">compactObject() <a class="header-anchor" href="#compactobject-1" aria-label="Permalink to &quot;compactObject()&quot;">​</a></h3><blockquote><p><strong>compactObject</strong>&lt;<code>T</code>&gt;(<code>object</code>): <code>{ [K in string | number | symbol as T[K] extends Nullish ? never : K]: T[K] }</code></p></blockquote><p>移除对象值为 <code>null</code> 和 <code>undefined</code> 的属性</p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code> extends <code>Recordable</code></td><td style="text-align:left;"><code>Recordable</code></td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">目标对象</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>{ [K in string | number | symbol as T[K] extends Nullish ? never : K]: T[K] }</code></p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compactObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; { a: 0, d: &#39;&#39;, f: false, e: NaN }</span></span></code></pre></div>`,13),n=[l];function c(o,r,h,d,p,k){return e(),a("div",null,n)}const u=t(i,[["render",c]]);export{m as __pageData,u as default};
